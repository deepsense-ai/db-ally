from typing import List, Optional

from dbally.audit import EventTracker
from dbally.iql import IQLError, IQLQuery
from dbally.iql_generator.aggregation_prompt import AGGREGATION_GENERATION_TEMPLATE, AggregationPromptFormat
from dbally.llms.base import LLM
from dbally.llms.clients import LLMOptions
from dbally.prompt.template import PromptTemplate
from dbally.views.exposed_functions import ExposedFunction

ERROR_MESSAGE = "Unfortunately, generated IQL aggregation is not valid. Please try again, \
    generation of correct IQL is very important. Below you have errors generated by the system:\n{error}"


class IQLAggregationGenerator:
    """
    Class used to manage choice and formatting of aggregation based on natural language question.
    """

    def __init__(self, llm: LLM, prompt_template: Optional[PromptTemplate[AggregationPromptFormat]] = None) -> None:
        """
        Constructs a new AggregationFormatter instance.

        Args:
            llm: LLM used to generate IQL
            prompt_template: If not provided by the users is set to `AGGREGATION_GENERATION_TEMPLATE`
        """
        self._llm = llm
        self._prompt_template = prompt_template or AGGREGATION_GENERATION_TEMPLATE

    async def generate_iql(
        self,
        question: str,
        aggregations: List[ExposedFunction],
        event_tracker: EventTracker,
        llm_options: Optional[LLMOptions] = None,
        n_retries: int = 3,
    ) -> IQLQuery:
        """
        Generates IQL in text form using LLM.

        Args:
            question: User question.
            event_tracker: Event store used to audit the generation process.
            aggregations: List of aggregations exposed by the view.
            llm_options: Options to use for the LLM client.
            n_retries: Number of retries to regenerate IQL in case of errors.

        Returns:
            Generated aggregation query.

        Raises:
            IQLError: If IQL generation fails after all retries.
        """
        prompt_format = AggregationPromptFormat(
            question=question,
            aggregations=aggregations,
        )

        formatted_prompt = self._prompt_template.format_prompt(prompt_format)

        for retry in range(n_retries + 1):
            try:
                response = await self._llm.generate_text(
                    prompt=formatted_prompt,
                    event_tracker=event_tracker,
                    options=llm_options,
                )
                # TODO: Move response parsing to llm generate_text method
                iql = formatted_prompt.response_parser(response)
                # TODO: Move IQL query parsing to prompt response parser
                return await IQLQuery.parse(
                    source=iql,
                    allowed_functions=aggregations,
                    event_tracker=event_tracker,
                )
            except IQLError as exc:
                if retry == n_retries:
                    raise exc
                formatted_prompt = formatted_prompt.add_assistant_message(response)
                formatted_prompt = formatted_prompt.add_user_message(ERROR_MESSAGE.format(error=exc))
